{"tagline":"A java framework inspired by node.js, designed to make it easy to quickly build java web applications","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Node.java","body":"Node.Java is a Java framework inspired by many of the ideas in Node.JS and the Express framework.\r\n\r\nPart of the appeal of Node.js is the ability to create web applications that are easy to understand, and\r\ndo so extremely quickly. For example, check out a node.js 'Hello World' application:\r\n\r\n    var express = require('express'),\r\n    app = express.createServer();\r\n    app.get('/', function(req, res){\r\n      res.send('Hello World');\r\n    });\r\n    app.listen(3000);\r\n\r\nWhat makes this appealing isn't the few lines of code - a servlet based Hello World might not be that\r\nmuch more code. But the Express version is extremely easy to follow. There are not configuration files.\r\nThere are no annotations. On larger scale applications, this might not matter much, but there is an\r\nenormous appeal to this kind of programming model, if the popularity of Node is any indication.\r\n\r\nHere's a Node.Java version of the same application:\r\n\r\n    public class HelloWorld {\r\n      public static void main(String[] args) {\r\n        Express express = new Express();\r\n        express.get(\"/\", new Express.Handler() {\r\n          public void exec(Request req, Response res, Express.Next next) {\r\n            res.send(\"Hello World\");\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\nJava requires that there be a little bit more code, but it maintains the clarity and simplicity\r\nof the Node.js version. Eventually, Lambda support in JDK8 will make the code even simpler.","google":""}